$date
	Sun Nov 05 04:17:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Top_tb $end
$var wire 32 ! sal [31:0] $end
$var wire 16 " addressSal [15:0] $end
$var reg 1 # clk $end
$scope module UUT $end
$var wire 16 $ addressSal [15:0] $end
$var wire 1 # clk $end
$var wire 32 % sal [31:0] $end
$var wire 32 & s_writeData [31:0] $end
$var wire 32 ' s_readData [31:0] $end
$var wire 16 ( s_pc [15:0] $end
$var wire 32 ) s_instr [31:0] $end
$var wire 16 * s_address [15:0] $end
$var wire 1 + s_WE $end
$scope module Memory $end
$var wire 1 # clk $end
$var wire 32 , writeData [31:0] $end
$var wire 32 - readData [31:0] $end
$var wire 16 . pc [15:0] $end
$var wire 32 / instr [31:0] $end
$var wire 16 0 address [15:0] $end
$var wire 1 + WE $end
$scope module dataMem $end
$var wire 1 # clk $end
$var wire 32 1 rd [31:0] $end
$var wire 1 + we $end
$var wire 32 2 wd [31:0] $end
$var wire 16 3 address [15:0] $end
$var integer 32 4 i [31:0] $end
$upscope $end
$scope module instrMem $end
$var wire 32 5 instr [31:0] $end
$var wire 16 6 pc [15:0] $end
$upscope $end
$upscope $end
$scope module RV $end
$var wire 1 # clk $end
$var wire 32 7 instr [31:0] $end
$var wire 32 8 readData [31:0] $end
$var wire 1 9 s_jump $end
$var wire 1 : s_zero $end
$var wire 32 ; writeData [31:0] $end
$var wire 2 < s_resSrc [1:0] $end
$var wire 1 = s_regWrite $end
$var wire 7 > s_op [6:0] $end
$var wire 2 ? s_immSrc [1:0] $end
$var wire 1 @ s_f7 $end
$var wire 3 A s_f3 [2:0] $end
$var wire 1 B s_branch $end
$var wire 1 C s_ALUSrc $end
$var wire 3 D s_ALUControl [2:0] $end
$var wire 16 E pc [15:0] $end
$var wire 16 F address [15:0] $end
$var wire 1 + WE $end
$scope module DataPath $end
$var wire 1 # clk $end
$var wire 32 G instr [31:0] $end
$var wire 1 9 jump $end
$var wire 16 H pc [15:0] $end
$var wire 32 I readData [31:0] $end
$var wire 32 J writeData [31:0] $end
$var wire 1 : zero $end
$var wire 32 K s_srcB [31:0] $end
$var wire 32 L s_srcA [31:0] $end
$var wire 32 M s_res [31:0] $end
$var wire 32 N s_rd2 [31:0] $end
$var wire 16 O s_pcNext [15:0] $end
$var wire 16 P s_pcJump [15:0] $end
$var wire 16 Q s_pcFinal [15:0] $end
$var wire 16 R s_pc [15:0] $end
$var wire 32 S s_immExt [31:0] $end
$var wire 16 T s_addSrc [15:0] $end
$var wire 32 U s_ALURes [31:0] $end
$var wire 2 V resSrc [1:0] $end
$var wire 1 = regWrite $end
$var wire 7 W op [6:0] $end
$var wire 2 X immSrc [1:0] $end
$var wire 1 @ f7 $end
$var wire 3 Y f3 [2:0] $end
$var wire 1 B branch $end
$var wire 16 Z address [15:0] $end
$var wire 1 C ALUSrc $end
$var wire 3 [ ALUControl [2:0] $end
$var reg 16 \ cuatro [15:0] $end
$scope module ALU1 $end
$var wire 32 ] res [31:0] $end
$var wire 1 : zero $end
$var wire 32 ^ srcB [31:0] $end
$var wire 32 _ srcA [31:0] $end
$var wire 3 ` ALUControl [2:0] $end
$var reg 32 a aux [31:0] $end
$upscope $end
$scope module AdderPCJump $end
$var wire 16 b op1 [15:0] $end
$var wire 16 c res [15:0] $end
$var wire 16 d op2 [15:0] $end
$upscope $end
$scope module AdderPCNext $end
$var wire 16 e res [15:0] $end
$var wire 16 f op2 [15:0] $end
$var wire 16 g op1 [15:0] $end
$upscope $end
$scope module MultBranch $end
$var wire 16 h e1 [15:0] $end
$var wire 16 i e2 [15:0] $end
$var wire 16 j sal [15:0] $end
$var wire 1 B sel $end
$var reg 16 k aux [15:0] $end
$upscope $end
$scope module MultData $end
$var wire 32 l e1 [31:0] $end
$var wire 32 m e2 [31:0] $end
$var wire 32 n e3 [31:0] $end
$var wire 32 o e4 [31:0] $end
$var wire 32 p sal [31:0] $end
$var wire 2 q sel [1:0] $end
$var reg 32 r aux [31:0] $end
$upscope $end
$scope module MultJump $end
$var wire 16 s e1 [15:0] $end
$var wire 16 t e2 [15:0] $end
$var wire 16 u sal [15:0] $end
$var wire 1 9 sel $end
$var reg 16 v aux [15:0] $end
$upscope $end
$scope module MultSrcB $end
$var wire 32 w sal [31:0] $end
$var wire 1 C sel $end
$var wire 32 x e2 [31:0] $end
$var wire 32 y e1 [31:0] $end
$var reg 32 z aux [31:0] $end
$upscope $end
$scope module PCReg $end
$var wire 1 # clk $end
$var wire 16 { pc [15:0] $end
$var wire 16 | pcNext [15:0] $end
$var reg 16 } count_reg [15:0] $end
$upscope $end
$scope module regBank $end
$var event 1 ~ _ivl_18 $end
$var wire 5 !" a1 [4:0] $end
$var wire 5 "" a2 [4:0] $end
$var wire 5 #" a3 [4:0] $end
$var wire 1 # clk $end
$var wire 32 $" rd1 [31:0] $end
$var wire 32 %" rd2 [31:0] $end
$var wire 32 &" wd3 [31:0] $end
$var wire 1 = we $end
$var integer 32 '" i [31:0] $end
$upscope $end
$scope module sExt $end
$var wire 32 (" instr [31:0] $end
$var wire 2 )" src [1:0] $end
$var wire 32 *" immExt [31:0] $end
$var reg 32 +" immaux [31:0] $end
$upscope $end
$upscope $end
$scope module unitControl $end
$var wire 2 ," ALUop [1:0] $end
$var wire 3 -" f3 [2:0] $end
$var wire 1 @ f7 $end
$var wire 1 9 jump $end
$var wire 7 ." op [6:0] $end
$var wire 1 : zero $end
$var wire 2 /" resSrc [1:0] $end
$var wire 1 = regWrite $end
$var wire 1 + memWrite $end
$var wire 2 0" immSrc [1:0] $end
$var wire 1 B branch $end
$var wire 1 C aluSrc $end
$var wire 3 1" ALUcontrol [2:0] $end
$scope module ALUDecoder $end
$var wire 3 2" aluControl [2:0] $end
$var wire 2 3" aluOp [1:0] $end
$var wire 3 4" f3 [2:0] $end
$var wire 1 @ f7 $end
$var wire 1 5" op $end
$var reg 3 6" aluControlAux [2:0] $end
$upscope $end
$scope module MainDecoder $end
$var wire 2 7" aluOp [1:0] $end
$var wire 1 C aluSrc $end
$var wire 1 B branch $end
$var wire 2 8" immSrc [1:0] $end
$var wire 1 9 jump $end
$var wire 1 + memWrite $end
$var wire 7 9" op [6:0] $end
$var wire 1 = regWrite $end
$var wire 2 :" resSrc [1:0] $end
$var reg 2 ;" aluOpAux [1:0] $end
$var reg 1 <" aluSrcAux $end
$var reg 1 =" branchAux $end
$var reg 2 >" immSrcAux [1:0] $end
$var reg 1 ?" jumpAux $end
$var reg 1 @" memWriteAux $end
$var reg 1 A" regWriteAux $end
$var reg 2 B" resSrcAux [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module dataPath_tb $end
$var reg 1 C" clk $end
$upscope $end
$scope module rv32i_tb $end
$var wire 32 D" writeData [31:0] $end
$var wire 16 E" pc [15:0] $end
$var wire 16 F" address [15:0] $end
$var wire 1 G" WE $end
$var reg 1 H" clk $end
$var reg 32 I" instr [31:0] $end
$var reg 32 J" readData [31:0] $end
$scope module UUT $end
$var wire 1 H" clk $end
$var wire 32 K" instr [31:0] $end
$var wire 32 L" readData [31:0] $end
$var wire 1 M" s_jump $end
$var wire 1 N" s_zero $end
$var wire 32 O" writeData [31:0] $end
$var wire 2 P" s_resSrc [1:0] $end
$var wire 1 Q" s_regWrite $end
$var wire 7 R" s_op [6:0] $end
$var wire 2 S" s_immSrc [1:0] $end
$var wire 1 T" s_f7 $end
$var wire 3 U" s_f3 [2:0] $end
$var wire 1 V" s_branch $end
$var wire 1 W" s_ALUSrc $end
$var wire 3 X" s_ALUControl [2:0] $end
$var wire 16 Y" pc [15:0] $end
$var wire 16 Z" address [15:0] $end
$var wire 1 G" WE $end
$scope module DataPath $end
$var wire 1 H" clk $end
$var wire 32 [" instr [31:0] $end
$var wire 1 M" jump $end
$var wire 16 \" pc [15:0] $end
$var wire 32 ]" readData [31:0] $end
$var wire 32 ^" writeData [31:0] $end
$var wire 1 N" zero $end
$var wire 32 _" s_srcB [31:0] $end
$var wire 32 `" s_srcA [31:0] $end
$var wire 32 a" s_res [31:0] $end
$var wire 32 b" s_rd2 [31:0] $end
$var wire 16 c" s_pcNext [15:0] $end
$var wire 16 d" s_pcJump [15:0] $end
$var wire 16 e" s_pcFinal [15:0] $end
$var wire 16 f" s_pc [15:0] $end
$var wire 32 g" s_immExt [31:0] $end
$var wire 16 h" s_addSrc [15:0] $end
$var wire 32 i" s_ALURes [31:0] $end
$var wire 2 j" resSrc [1:0] $end
$var wire 1 Q" regWrite $end
$var wire 7 k" op [6:0] $end
$var wire 2 l" immSrc [1:0] $end
$var wire 1 T" f7 $end
$var wire 3 m" f3 [2:0] $end
$var wire 1 V" branch $end
$var wire 16 n" address [15:0] $end
$var wire 1 W" ALUSrc $end
$var wire 3 o" ALUControl [2:0] $end
$var reg 16 p" cuatro [15:0] $end
$scope module ALU1 $end
$var wire 32 q" res [31:0] $end
$var wire 1 N" zero $end
$var wire 32 r" srcB [31:0] $end
$var wire 32 s" srcA [31:0] $end
$var wire 3 t" ALUControl [2:0] $end
$var reg 32 u" aux [31:0] $end
$upscope $end
$scope module AdderPCJump $end
$var wire 16 v" op1 [15:0] $end
$var wire 16 w" res [15:0] $end
$var wire 16 x" op2 [15:0] $end
$upscope $end
$scope module AdderPCNext $end
$var wire 16 y" res [15:0] $end
$var wire 16 z" op2 [15:0] $end
$var wire 16 {" op1 [15:0] $end
$upscope $end
$scope module MultBranch $end
$var wire 16 |" e1 [15:0] $end
$var wire 16 }" e2 [15:0] $end
$var wire 16 ~" sal [15:0] $end
$var wire 1 V" sel $end
$var reg 16 !# aux [15:0] $end
$upscope $end
$scope module MultData $end
$var wire 32 "# e1 [31:0] $end
$var wire 32 ## e2 [31:0] $end
$var wire 32 $# e3 [31:0] $end
$var wire 32 %# e4 [31:0] $end
$var wire 32 &# sal [31:0] $end
$var wire 2 '# sel [1:0] $end
$var reg 32 (# aux [31:0] $end
$upscope $end
$scope module MultJump $end
$var wire 16 )# e1 [15:0] $end
$var wire 16 *# e2 [15:0] $end
$var wire 16 +# sal [15:0] $end
$var wire 1 M" sel $end
$var reg 16 ,# aux [15:0] $end
$upscope $end
$scope module MultSrcB $end
$var wire 32 -# sal [31:0] $end
$var wire 1 W" sel $end
$var wire 32 .# e2 [31:0] $end
$var wire 32 /# e1 [31:0] $end
$var reg 32 0# aux [31:0] $end
$upscope $end
$scope module PCReg $end
$var wire 1 H" clk $end
$var wire 16 1# pc [15:0] $end
$var wire 16 2# pcNext [15:0] $end
$var reg 16 3# count_reg [15:0] $end
$upscope $end
$scope module regBank $end
$var event 1 4# _ivl_18 $end
$var wire 5 5# a1 [4:0] $end
$var wire 5 6# a2 [4:0] $end
$var wire 5 7# a3 [4:0] $end
$var wire 1 H" clk $end
$var wire 32 8# rd1 [31:0] $end
$var wire 32 9# rd2 [31:0] $end
$var wire 32 :# wd3 [31:0] $end
$var wire 1 Q" we $end
$var integer 32 ;# i [31:0] $end
$upscope $end
$scope module sExt $end
$var wire 32 <# instr [31:0] $end
$var wire 2 =# src [1:0] $end
$var wire 32 ># immExt [31:0] $end
$var reg 32 ?# immaux [31:0] $end
$upscope $end
$upscope $end
$scope module unitControl $end
$var wire 2 @# ALUop [1:0] $end
$var wire 3 A# f3 [2:0] $end
$var wire 1 T" f7 $end
$var wire 1 M" jump $end
$var wire 7 B# op [6:0] $end
$var wire 1 N" zero $end
$var wire 2 C# resSrc [1:0] $end
$var wire 1 Q" regWrite $end
$var wire 1 G" memWrite $end
$var wire 2 D# immSrc [1:0] $end
$var wire 1 V" branch $end
$var wire 1 W" aluSrc $end
$var wire 3 E# ALUcontrol [2:0] $end
$scope module ALUDecoder $end
$var wire 3 F# aluControl [2:0] $end
$var wire 2 G# aluOp [1:0] $end
$var wire 3 H# f3 [2:0] $end
$var wire 1 T" f7 $end
$var wire 1 I# op $end
$var reg 3 J# aluControlAux [2:0] $end
$upscope $end
$scope module MainDecoder $end
$var wire 2 K# aluOp [1:0] $end
$var wire 1 W" aluSrc $end
$var wire 1 V" branch $end
$var wire 2 L# immSrc [1:0] $end
$var wire 1 M" jump $end
$var wire 1 G" memWrite $end
$var wire 7 M# op [6:0] $end
$var wire 1 Q" regWrite $end
$var wire 2 N# resSrc [1:0] $end
$var reg 2 O# aluOpAux [1:0] $end
$var reg 1 P# aluSrcAux $end
$var reg 1 Q# branchAux $end
$var reg 2 R# immSrcAux [1:0] $end
$var reg 1 S# jumpAux $end
$var reg 1 T# memWriteAux $end
$var reg 1 U# regWriteAux $end
$var reg 2 V# resSrcAux [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 V#
1U#
0T#
0S#
b0 R#
0Q#
1P#
b10 O#
b0 N#
b10011 M#
b0 L#
bx0 K#
b0 J#
0I#
b0 H#
bx0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b10011 B#
b0 A#
bx0 @#
b11 ?#
b11 >#
b0 =#
b1100000000010000010011 <#
b100000 ;#
b11 :#
b0 9#
b0 8#
b1000 7#
b11 6#
b0 5#
14#
b0 3#
bx 2#
b0 1#
b11 0#
b0 /#
b11 .#
b11 -#
bx ,#
bx +#
b11 *#
b100 )#
b11 (#
b0 '#
b11 &#
bz %#
b100 $#
bx ##
b11 "#
b100 !#
b100 ~"
b11 }"
b100 |"
b100 {"
b0 z"
b100 y"
b0 x"
b11 w"
b11 v"
b11 u"
b0 t"
b0 s"
b11 r"
b11 q"
b100 p"
b0 o"
b11 n"
b0 m"
b0 l"
b10011 k"
b0 j"
b11 i"
b100 h"
b11 g"
b0 f"
bx e"
b11 d"
b100 c"
b0 b"
b11 a"
b0 `"
b11 _"
b0 ^"
bx ]"
b0 \"
b1100000000010000010011 ["
b11 Z"
b0 Y"
b0 X"
1W"
0V"
b0 U"
0T"
b0 S"
b10011 R"
1Q"
b0 P"
b0 O"
0N"
zM"
bx L"
b1100000000010000010011 K"
bx J"
b1100000000010000010011 I"
0H"
0G"
b11 F"
b0 E"
b0 D"
0C"
b0 B"
1A"
0@"
0?"
b0 >"
0="
1<"
b10 ;"
b0 :"
b10011 9"
b0 8"
bx0 7"
b0 6"
05"
b0 4"
bx0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b10011 ."
b0 -"
bx0 ,"
b11 +"
b11 *"
b0 )"
b1100000000010000010011 ("
b100000 '"
b11 &"
b0 %"
b0 $"
b1000 #"
b11 ""
b0 !"
1~
b0 }
bx |
b0 {
b11 z
b0 y
b11 x
b11 w
bx v
bx u
b11 t
b100 s
b11 r
b0 q
b11 p
bz o
b100 n
b0 m
b11 l
b100 k
b100 j
b11 i
b100 h
b100 g
b0 f
b100 e
b0 d
b11 c
b11 b
b11 a
b0 `
b0 _
b11 ^
b11 ]
b100 \
b0 [
b11 Z
b0 Y
b0 X
b10011 W
b0 V
b11 U
b100 T
b11 S
b0 R
bx Q
b11 P
b100 O
b0 N
b11 M
b0 L
b11 K
b0 J
b0 I
b0 H
b1100000000010000010011 G
b11 F
b0 E
b0 D
1C
0B
b0 A
0@
b0 ?
b10011 >
1=
b0 <
b0 ;
0:
z9
b0 8
b1100000000010000010011 7
b0 6
b1100000000010000010011 5
b100000 4
b11 3
b0 2
b0 1
b11 0
b1100000000010000010011 /
b0 .
b0 -
b0 ,
0+
b11 *
b1100000000010000010011 )
b0 (
b0 '
b0 &
b0 %
b11 $
0#
b11 "
b0 !
$end
#50000
bx M
bx p
bx &"
bx r
bx '
bx -
bx 1
bx 8
bx I
bx m
bx "
bx $
bx *
bx 0
bx 3
bx F
bx Z
bx U
bx ]
bx a
bx l
x5"
bx b
bx i
bx K
bx ^
bx w
bx z
bx L
bx _
bx $"
bx !"
bx !
bx %
bx &
bx ,
bx 2
bx ;
bx J
bx N
bx y
bx %"
bx ""
bx #"
x@
bx A
bx Y
bx -"
bx 4"
bx >
bx W
bx ."
bx 9"
bx S
bx x
bx *"
bx +"
b0xxxxxxxxxxxxxxxx $#
bx c"
bx y"
bx )#
bx d"
bx w"
bx *#
bx E"
bx Y"
bx \"
bx f"
bx x"
bx z"
bx 1#
bx 3#
b0xxxxxxxxxxxxxxxx n
bx O
bx e
bx s
bx P
bx c
bx t
bx )
bx /
bx 5
bx 7
bx G
bx ("
bx (
bx .
bx 6
bx E
bx H
bx R
bx d
bx f
bx {
bx }
1H"
1C"
1#
#100000
b0 a"
b0 &#
b0 :#
b0 (#
b0 F"
b0 Z"
b0 n"
b0 i"
b0 q"
b0 u"
b0 "#
b0 v"
b0 }"
b0 _"
b0 r"
b0 -#
b0 0#
b0 6#
b0 7#
b0 g"
b0 .#
b0 >#
b0 ?#
0H"
0C"
0#
b10011 I"
b10011 K"
b10011 ["
b10011 <#
#150000
1H"
1C"
1#
#200000
b110 a"
b110 &#
b110 :#
b110 (#
b110 F"
b110 Z"
b110 n"
b110 i"
b110 q"
b110 u"
b110 "#
b11 v"
b11 }"
b11 _"
b11 r"
b11 -#
b11 0#
b11 `"
b11 s"
b11 8#
b1000 5#
b11 6#
b1000 7#
b11 g"
b11 .#
b11 >#
b11 ?#
0H"
0C"
0#
b1101000000010000010011 I"
b1101000000010000010011 K"
b1101000000010000010011 ["
b1101000000010000010011 <#
#250000
b1001 a"
b1001 &#
b1001 :#
b1001 (#
b1001 F"
b1001 Z"
b1001 n"
b1001 i"
b1001 q"
b1001 u"
b1001 "#
b110 `"
b110 s"
b110 8#
1H"
1C"
1#
#300000
b0 a"
b0 &#
b0 :#
b0 (#
b0 F"
b0 Z"
b0 n"
b0 i"
b0 q"
b0 u"
b0 "#
b0 v"
b0 }"
b0 _"
b0 r"
b0 -#
b0 0#
b0 `"
b0 s"
b0 8#
b0 5#
b0 6#
b0 7#
b0 g"
b0 .#
b0 >#
b0 ?#
0H"
0C"
0#
b10011 I"
b10011 K"
b10011 ["
b10011 <#
#350000
1H"
1C"
1#
#400000
b1000 a"
b1000 &#
b1000 :#
b1000 (#
b1000 F"
b1000 Z"
b1000 n"
b1000 i"
b1000 q"
b1000 u"
b1000 "#
b10 v"
b10 }"
b10 _"
b10 r"
b10 -#
b10 0#
b110 `"
b110 s"
b110 8#
b1000 5#
b10 6#
b1000 7#
b10 g"
b10 .#
b10 >#
b10 ?#
0H"
0C"
0#
b1001000000010000010011 I"
b1001000000010000010011 K"
b1001000000010000010011 ["
b1001000000010000010011 <#
#450000
b1010 a"
b1010 &#
b1010 :#
b1010 (#
b1010 F"
b1010 Z"
b1010 n"
b1010 i"
b1010 q"
b1010 u"
b1010 "#
b1000 `"
b1000 s"
b1000 8#
1H"
1C"
1#
#500000
b0 a"
b0 &#
b0 :#
b0 (#
b0 F"
b0 Z"
b0 n"
b0 i"
b0 q"
b0 u"
b0 "#
b0 v"
b0 }"
b0 _"
b0 r"
b0 -#
b0 0#
b0 `"
b0 s"
b0 8#
b0 5#
b0 6#
b0 7#
b0 g"
b0 .#
b0 >#
b0 ?#
0H"
0C"
0#
b10011 I"
b10011 K"
b10011 ["
b10011 <#
#550000
1H"
1C"
1#
#600000
b1000 a"
b1000 &#
b1000 :#
b1000 (#
b1000 F"
b1000 Z"
b1000 n"
b1000 i"
b1000 q"
b1000 u"
b1000 "#
b1000 `"
b1000 s"
b1000 8#
b1000 5#
b1000 7#
0H"
0C"
0#
b1000000010000010011 I"
b1000000010000010011 K"
b1000000010000010011 ["
b1000000010000010011 <#
#650000
1H"
1C"
1#
#700000
0H"
0C"
0#
#750000
1H"
1C"
1#
#800000
0H"
0C"
0#
#850000
1H"
1C"
1#
#900000
0H"
0C"
0#
#950000
1H"
1C"
1#
#1000000
0H"
0C"
0#
