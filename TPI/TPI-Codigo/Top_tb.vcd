$date
	Wed Nov  8 08:26:47 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Top_tb $end
$var wire 32 ! sal [31:0] $end
$var wire 16 " addressSal [15:0] $end
$var reg 1 # clk $end
$scope module UUT $end
$var wire 16 $ addressSal [15:0] $end
$var wire 1 # clk $end
$var wire 32 % s_readData [31:0] $end
$var wire 32 & sal [31:0] $end
$var wire 32 ' s_writeData [31:0] $end
$var wire 16 ( s_pc [15:0] $end
$var wire 32 ) s_instr [31:0] $end
$var wire 16 * s_address [15:0] $end
$var wire 1 + s_WE $end
$scope module Memory $end
$var wire 1 # clk $end
$var wire 32 , readData [31:0] $end
$var wire 32 - writeData [31:0] $end
$var wire 16 . pc [15:0] $end
$var wire 32 / instr [31:0] $end
$var wire 2 0 block_select [1:0] $end
$var wire 16 1 address_virtual [15:0] $end
$var wire 16 2 address_physical [15:0] $end
$var wire 1 + WE $end
$var wire 1 3 StackEnable $end
$var wire 1 4 MMIOEnable $end
$var wire 1 5 DataEnable $end
$var wire 32 6 DEBUGinstr20 [31:0] $end
$var wire 32 7 DEBUGinstr16 [31:0] $end
$scope module MMIO $end
$var wire 1 # clk $end
$var wire 32 8 rd [31:0] $end
$var wire 1 4 we $end
$var wire 32 9 wd [31:0] $end
$var wire 16 : address [15:0] $end
$var integer 32 ; i [31:0] $end
$upscope $end
$scope module dataMem $end
$var wire 1 # clk $end
$var wire 32 < rd [31:0] $end
$var wire 1 5 we $end
$var wire 32 = wd [31:0] $end
$var wire 16 > address [15:0] $end
$var integer 32 ? i [31:0] $end
$upscope $end
$scope module instrMem $end
$var wire 32 @ DEBUGinstr16 [31:0] $end
$var wire 32 A DEBUGinstr20 [31:0] $end
$var wire 32 B instr [31:0] $end
$var wire 16 C pc [15:0] $end
$upscope $end
$scope module memory_mapping $end
$var wire 16 D address_virtual [15:0] $end
$var reg 1 5 DataEnable $end
$var reg 1 4 MMIOEnable $end
$var reg 1 3 StackEnable $end
$var reg 16 E address_physical [15:0] $end
$var reg 2 F block_select [1:0] $end
$upscope $end
$scope module stackMem $end
$var wire 16 G address [15:0] $end
$var wire 1 # clk $end
$var wire 32 H rd [31:0] $end
$var wire 1 3 we $end
$var wire 32 I wd [31:0] $end
$var integer 32 J i [31:0] $end
$upscope $end
$upscope $end
$scope module RV $end
$var wire 1 # clk $end
$var wire 32 K instr [31:0] $end
$var wire 32 L readData [31:0] $end
$var wire 1 M s_jump $end
$var wire 1 N s_zero $end
$var wire 32 O writeData [31:0] $end
$var wire 2 P s_resSrc [1:0] $end
$var wire 1 Q s_regWrite $end
$var wire 7 R s_op [6:0] $end
$var wire 2 S s_immSrc [1:0] $end
$var wire 1 T s_f7 $end
$var wire 3 U s_f3 [2:0] $end
$var wire 1 V s_branch $end
$var wire 1 W s_ALUSrc $end
$var wire 3 X s_ALUControl [2:0] $end
$var wire 16 Y pc [15:0] $end
$var wire 16 Z address [15:0] $end
$var wire 1 + WE $end
$scope module DataPath $end
$var wire 1 # clk $end
$var wire 32 [ instr [31:0] $end
$var wire 1 M jump $end
$var wire 16 \ pc [15:0] $end
$var wire 32 ] readData [31:0] $end
$var wire 32 ^ writeData [31:0] $end
$var wire 1 N zero $end
$var wire 32 _ s_srcB [31:0] $end
$var wire 32 ` s_srcA [31:0] $end
$var wire 32 a s_res [31:0] $end
$var wire 32 b s_rd2 [31:0] $end
$var wire 16 c s_pcNext [15:0] $end
$var wire 16 d s_pcJump [15:0] $end
$var wire 16 e s_pcFinal [15:0] $end
$var wire 16 f s_pc [15:0] $end
$var wire 32 g s_immExt [31:0] $end
$var wire 16 h s_addSrc [15:0] $end
$var wire 32 i s_ALURes [31:0] $end
$var wire 2 j resSrc [1:0] $end
$var wire 1 Q regWrite $end
$var wire 7 k op [6:0] $end
$var wire 2 l immSrc [1:0] $end
$var wire 1 T f7 $end
$var wire 3 m f3 [2:0] $end
$var wire 1 V branch $end
$var wire 16 n address [15:0] $end
$var wire 1 W ALUSrc $end
$var wire 3 o ALUControl [2:0] $end
$var reg 16 p cuatro [15:0] $end
$scope module ALU1 $end
$var wire 32 q res [31:0] $end
$var wire 1 N zero $end
$var wire 32 r srcB [31:0] $end
$var wire 32 s srcA [31:0] $end
$var wire 3 t ALUControl [2:0] $end
$var reg 32 u aux [31:0] $end
$upscope $end
$scope module AdderPCJump $end
$var wire 16 v op1 [15:0] $end
$var wire 16 w res [15:0] $end
$var wire 16 x op2 [15:0] $end
$upscope $end
$scope module AdderPCNext $end
$var wire 16 y res [15:0] $end
$var wire 16 z op2 [15:0] $end
$var wire 16 { op1 [15:0] $end
$upscope $end
$scope module MultBranch $end
$var wire 16 | e1 [15:0] $end
$var wire 16 } e2 [15:0] $end
$var wire 16 ~ sal [15:0] $end
$var wire 1 V sel $end
$var reg 16 !" aux [15:0] $end
$upscope $end
$scope module MultData $end
$var wire 32 "" e1 [31:0] $end
$var wire 32 #" e2 [31:0] $end
$var wire 32 $" e3 [31:0] $end
$var wire 32 %" e4 [31:0] $end
$var wire 32 &" sal [31:0] $end
$var wire 2 '" sel [1:0] $end
$var reg 32 (" aux [31:0] $end
$upscope $end
$scope module MultJump $end
$var wire 16 )" e1 [15:0] $end
$var wire 16 *" e2 [15:0] $end
$var wire 16 +" sal [15:0] $end
$var wire 1 M sel $end
$var reg 16 ," aux [15:0] $end
$upscope $end
$scope module MultSrcB $end
$var wire 32 -" sal [31:0] $end
$var wire 1 W sel $end
$var wire 32 ." e2 [31:0] $end
$var wire 32 /" e1 [31:0] $end
$var reg 32 0" aux [31:0] $end
$upscope $end
$scope module PCReg $end
$var wire 1 # clk $end
$var wire 16 1" pc [15:0] $end
$var wire 16 2" pcNext [15:0] $end
$var reg 16 3" count_reg [15:0] $end
$upscope $end
$scope module regBank $end
$var event 1 4" _ivl_18 $end
$var wire 5 5" a1 [4:0] $end
$var wire 5 6" a2 [4:0] $end
$var wire 5 7" a3 [4:0] $end
$var wire 1 # clk $end
$var wire 32 8" rd1 [31:0] $end
$var wire 32 9" rd2 [31:0] $end
$var wire 32 :" wd3 [31:0] $end
$var wire 1 Q we $end
$var integer 32 ;" i [31:0] $end
$upscope $end
$scope module sExt $end
$var wire 32 <" instr [31:0] $end
$var wire 2 =" src [1:0] $end
$var wire 32 >" immExt [31:0] $end
$var reg 32 ?" immaux [31:0] $end
$upscope $end
$upscope $end
$scope module unitControl $end
$var wire 2 @" ALUop [1:0] $end
$var wire 3 A" f3 [2:0] $end
$var wire 1 T f7 $end
$var wire 1 M jump $end
$var wire 7 B" op [6:0] $end
$var wire 1 N zero $end
$var wire 2 C" resSrc [1:0] $end
$var wire 1 Q regWrite $end
$var wire 1 + memWrite $end
$var wire 2 D" immSrc [1:0] $end
$var wire 1 V branch $end
$var wire 1 W aluSrc $end
$var wire 3 E" ALUcontrol [2:0] $end
$scope module ALUDecoder $end
$var wire 3 F" aluControl [2:0] $end
$var wire 2 G" aluOp [1:0] $end
$var wire 3 H" f3 [2:0] $end
$var wire 1 T f7 $end
$var wire 1 I" op $end
$var reg 3 J" aluControlAux [2:0] $end
$upscope $end
$scope module MainDecoder $end
$var wire 2 K" aluOp [1:0] $end
$var wire 1 W aluSrc $end
$var wire 1 V branch $end
$var wire 2 L" immSrc [1:0] $end
$var wire 1 M jump $end
$var wire 1 + memWrite $end
$var wire 7 M" op [6:0] $end
$var wire 1 Q regWrite $end
$var wire 2 N" resSrc [1:0] $end
$var reg 2 O" aluOpAux [1:0] $end
$var reg 1 P" aluSrcAux $end
$var reg 1 Q" branchAux $end
$var reg 2 R" immSrcAux [1:0] $end
$var reg 1 S" jumpAux $end
$var reg 1 T" memWriteAux $end
$var reg 1 U" regWriteAux $end
$var reg 2 V" resSrcAux [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 V"
1U"
0T"
0S"
b0 R"
0Q"
1P"
b10 O"
b0 N"
b10011 M"
b0 L"
bx0 K"
b0 J"
0I"
b0 H"
bx0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b10011 B"
b0 A"
bx0 @"
b0 ?"
b0 >"
b0 ="
b1010010011 <"
b100000 ;"
b0 :"
b0 9"
b0 8"
b101 7"
b0 6"
b0 5"
14"
b0 3"
b100 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b100 ,"
b100 +"
b0 *"
b100 )"
b0 ("
b0 '"
b0 &"
bz %"
b100 $"
bx #"
b0 ""
b100 !"
b100 ~
b0 }
b100 |
b100 {
b0 z
b100 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b100 p
b0 o
b0 n
b0 m
b0 l
b10011 k
b0 j
b0 i
b100 h
b0 g
b0 f
b100 e
b0 d
b100 c
b0 b
b0 a
b0 `
b0 _
b0 ^
bx ]
b0 \
b1010010011 [
b0 Z
b0 Y
b0 X
1W
0V
b0 U
0T
b0 S
b10011 R
1Q
b0 P
b0 O
0N
0M
bx L
b1010010011 K
b100000 J
b0 I
bx H
bx G
b0 F
bx E
b0 D
b0 C
b1010010011 B
b100111000001110010011 A
b11111101000011101000111010010011 @
b100000 ?
bx >
b0 =
bx <
b100000 ;
bx :
b0 9
bx 8
b11111101000011101000111010010011 7
b100111000001110010011 6
05
04
03
bx 2
b0 1
b0 0
b1010010011 /
b0 .
b0 -
bx ,
0+
b0 *
b1010010011 )
b0 (
b0 '
b0 &
bx %
b0 $
0#
b0 "
b0 !
$end
#50000
bx a
bx &"
bx :"
bx ("
b0 @"
b0 G"
b0 K"
b0 O"
b1 P
b1 j
b1 '"
b1 C"
b1 N"
b1 V"
b1000 e
b1000 +"
b1000 2"
b1000 ,"
b1011 5"
b11100 7"
b10 U
b10 m
b10 A"
b10 H"
b11 R
b11 k
b11 B"
b11 M"
b1000 $"
b1000 c
b1000 y
b1000 )"
b100 d
b100 w
b100 *"
b1011010111000000011 )
b1011010111000000011 /
b1011010111000000011 B
b1011010111000000011 K
b1011010111000000011 [
b1011010111000000011 <"
b100 (
b100 .
b100 C
b100 Y
b100 \
b100 f
b100 x
b100 z
b100 1"
b100 3"
1#
#100000
0#
#150000
bx "
bx $
bx *
bx 1
bx D
bx Z
bx n
bx a
bx &"
bx :"
bx ("
bx i
bx q
bx u
bx ""
1I"
bx0 @"
bx0 G"
bx0 K"
b10 O"
0W
0P"
b0 P
b0 j
b0 '"
b0 C"
b0 N"
b0 V"
b11100 v
b11100 }
bx _
bx r
bx -"
bx 0"
b1100 e
b1100 +"
b1100 2"
b1100 ,"
b0 5"
bx !
bx &
bx '
bx -
bx 9
bx =
bx I
bx O
bx ^
bx b
bx /"
bx 9"
b11100 6"
b11111 7"
b0 U
b0 m
b0 A"
b0 H"
b110011 R
b110011 k
b110011 B"
b110011 M"
b11100 g
b11100 ."
b11100 >"
b11100 ?"
b1100 $"
b1100 c
b1100 y
b1100 )"
b100100 d
b100100 w
b100100 *"
b1110000000000111110110011 )
b1110000000000111110110011 /
b1110000000000111110110011 B
b1110000000000111110110011 K
b1110000000000111110110011 [
b1110000000000111110110011 <"
b1000 (
b1000 .
b1000 C
b1000 Y
b1000 \
b1000 f
b1000 x
b1000 z
b1000 1"
b1000 3"
1#
#200000
0#
#250000
b10000 a
b10000 &"
b10000 :"
b10000 ("
b11 S
b11 l
b11 ="
b11 D"
b11 L"
b11 R"
b10 P
b10 j
b10 '"
b10 C"
b10 N"
b10 V"
xM
1S"
b1111111111110100 v
b1111111111110100 }
b0 _
b0 r
b0 -"
b0 0"
b10000 e
b10000 +"
b10000 2"
b10000 ,"
bx `
bx s
bx 8"
b11111 5"
b0 !
b0 &
b0 '
b0 -
b0 9
b0 =
b0 I
b0 O
b0 ^
b0 b
b0 /"
b0 9"
b10101 6"
b0 7"
1T
b111 U
b111 m
b111 A"
b111 H"
b1101111 R
b1101111 k
b1101111 B"
b1101111 M"
b11111111111111111111111111110100 g
b11111111111111111111111111110100 ."
b11111111111111111111111111110100 >"
b11111111111111111111111111110100 ?"
b10000 $"
b10000 c
b10000 y
b10000 )"
b0 d
b0 w
b0 *"
b11111111010111111111000001101111 )
b11111111010111111111000001101111 /
b11111111010111111111000001101111 B
b11111111010111111111000001101111 K
b11111111010111111111000001101111 [
b11111111010111111111000001101111 <"
b1100 (
b1100 .
b1100 C
b1100 Y
b1100 \
b1100 f
b1100 x
b1100 z
b1100 1"
b1100 3"
1#
#300000
0#
#350000
b1111111111010000 "
b1111111111010000 $
b1111111111010000 *
b1111111111010000 1
b1111111111010000 D
b1111111111010000 Z
b1111111111010000 n
b11111111111111111111111111010000 _
b11111111111111111111111111010000 r
b11111111111111111111111111010000 -"
b11111111111111111111111111010000 0"
b11111111111111111111111111010000 i
b11111111111111111111111111010000 q
b11111111111111111111111111010000 u
b11111111111111111111111111010000 ""
0I"
b0 S
b0 l
b0 ="
b0 D"
b0 L"
b0 R"
1W
1P"
b0 P
b0 j
b0 '"
b0 C"
b0 N"
b0 V"
b1111111111010000 v
b1111111111010000 }
b11111111111111111111111111010000 a
b11111111111111111111111111010000 &"
b11111111111111111111111111010000 :"
b11111111111111111111111111010000 ("
b0 `
b0 s
b0 8"
b11101 5"
b10000 6"
b11101 7"
b0 U
b0 m
b0 A"
b0 H"
b10011 R
b10011 k
b10011 B"
b10011 M"
b11111111111111111111111111010000 g
b11111111111111111111111111010000 ."
b11111111111111111111111111010000 >"
b11111111111111111111111111010000 ?"
b10100 $"
b10100 c
b10100 y
b10100 )"
b1111111111100000 d
b1111111111100000 w
b1111111111100000 *"
b11111101000011101000111010010011 )
b11111101000011101000111010010011 /
b11111101000011101000111010010011 B
b11111101000011101000111010010011 K
b11111101000011101000111010010011 [
b11111101000011101000111010010011 <"
b10000 (
b10000 .
b10000 C
b10000 Y
b10000 \
b10000 f
b10000 x
b10000 z
b10000 1"
b10000 3"
1#
#400000
0#
#450000
b11111111111111111111111110100000 a
b11111111111111111111111110100000 &"
b11111111111111111111111110100000 :"
b11111111111111111111111110100000 ("
b1111111110100000 "
b1111111110100000 $
b1111111110100000 *
b1111111110100000 1
b1111111110100000 D
b1111111110100000 Z
b1111111110100000 n
b11111111111111111111111110100000 i
b11111111111111111111111110100000 q
b11111111111111111111111110100000 u
b11111111111111111111111110100000 ""
b11111111111111111111111111010000 `
b11111111111111111111111111010000 s
b11111111111111111111111111010000 8"
1#
#500000
0#
#550000
b11111111111111111111111101110000 a
b11111111111111111111111101110000 &"
b11111111111111111111111101110000 :"
b11111111111111111111111101110000 ("
b1111111101110000 "
b1111111101110000 $
b1111111101110000 *
b1111111101110000 1
b1111111101110000 D
b1111111101110000 Z
b1111111101110000 n
b11111111111111111111111101110000 i
b11111111111111111111111101110000 q
b11111111111111111111111101110000 u
b11111111111111111111111101110000 ""
b11111111111111111111111110100000 `
b11111111111111111111111110100000 s
b11111111111111111111111110100000 8"
1#
#600000
0#
#650000
b11111111111111111111111101000000 a
b11111111111111111111111101000000 &"
b11111111111111111111111101000000 :"
b11111111111111111111111101000000 ("
b1111111101000000 "
b1111111101000000 $
b1111111101000000 *
b1111111101000000 1
b1111111101000000 D
b1111111101000000 Z
b1111111101000000 n
b11111111111111111111111101000000 i
b11111111111111111111111101000000 q
b11111111111111111111111101000000 u
b11111111111111111111111101000000 ""
b11111111111111111111111101110000 `
b11111111111111111111111101110000 s
b11111111111111111111111101110000 8"
1#
#700000
0#
#750000
b11111111111111111111111100010000 a
b11111111111111111111111100010000 &"
b11111111111111111111111100010000 :"
b11111111111111111111111100010000 ("
b1111111100010000 "
b1111111100010000 $
b1111111100010000 *
b1111111100010000 1
b1111111100010000 D
b1111111100010000 Z
b1111111100010000 n
b11111111111111111111111100010000 i
b11111111111111111111111100010000 q
b11111111111111111111111100010000 u
b11111111111111111111111100010000 ""
b11111111111111111111111101000000 `
b11111111111111111111111101000000 s
b11111111111111111111111101000000 8"
1#
#800000
0#
#850000
b11111111111111111111111011100000 a
b11111111111111111111111011100000 &"
b11111111111111111111111011100000 :"
b11111111111111111111111011100000 ("
b1111111011100000 "
b1111111011100000 $
b1111111011100000 *
b1111111011100000 1
b1111111011100000 D
b1111111011100000 Z
b1111111011100000 n
b11111111111111111111111011100000 i
b11111111111111111111111011100000 q
b11111111111111111111111011100000 u
b11111111111111111111111011100000 ""
b11111111111111111111111100010000 `
b11111111111111111111111100010000 s
b11111111111111111111111100010000 8"
1#
#900000
0#
#950000
b11111111111111111111111010110000 a
b11111111111111111111111010110000 &"
b11111111111111111111111010110000 :"
b11111111111111111111111010110000 ("
b1111111010110000 "
b1111111010110000 $
b1111111010110000 *
b1111111010110000 1
b1111111010110000 D
b1111111010110000 Z
b1111111010110000 n
b11111111111111111111111010110000 i
b11111111111111111111111010110000 q
b11111111111111111111111010110000 u
b11111111111111111111111010110000 ""
b11111111111111111111111011100000 `
b11111111111111111111111011100000 s
b11111111111111111111111011100000 8"
1#
#1000000
0#
